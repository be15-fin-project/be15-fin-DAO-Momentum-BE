<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.momentum.retention.prospect.query.mapper.RetentionStatisticsMapper">

    <!-- 공통: 부서 트리 -->
    <sql id="CommonDeptTree">
        WITH RECURSIVE dept_tree AS (
            SELECT dept_id
            FROM department
            WHERE dept_id = #{req.deptId} AND is_deleted = 'N'
        UNION ALL
            SELECT d.dept_id
            FROM department d
            INNER JOIN dept_tree dt ON d.parent_dept_id = dt.dept_id
            WHERE d.is_deleted = 'N'
        )
    </sql>

    <!-- 평균 근속 지수 + 안전성 비율 -->
    <select id="findAverageRetentionScore"
            parameterType="com.dao.momentum.retention.prospect.query.dto.request.RetentionStatisticsRequestDto"
            resultType="com.dao.momentum.retention.prospect.query.dto.response.RetentionAverageScoreDto">

        <if test="req.deptId != null">
            <include refid="CommonDeptTree"/>
        </if>

        SELECT
            ROUND(AVG(rs.retention_score), 2) AS averageScore,
            COUNT(*) AS totalEmpCount,
            ROUND(SUM(CASE WHEN rs.retention_score &gt;= 60 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) AS stabilitySafeRatio,
            ROUND(SUM(CASE WHEN rs.retention_score &lt; 60 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) AS stabilityRiskRatio
        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        <where>
            <if test="req.roundId != null">
                AND rs.round_id = #{req.roundId}
            </if>
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
        </where>
    </select>

    <!-- 전체 조직 안정성 분포 요약 (인원 수) -->
    <select id="findOverallStabilityRatio"
            parameterType="com.dao.momentum.retention.prospect.query.dto.request.RetentionInsightRequestDto"
            resultType="com.dao.momentum.retention.prospect.query.dto.response.StabilityRatioSummaryDto">

        <if test="req.deptId != null">
            <include refid="CommonDeptTree"/>
        </if>

        SELECT
            SUM(CASE WHEN rs.retention_score &gt;= 80 THEN 1 ELSE 0 END) AS goodCount,
            SUM(CASE WHEN rs.retention_score &gt;= 60 AND rs.retention_score &lt; 80 THEN 1 ELSE 0 END) AS normalCount,
            SUM(CASE WHEN rs.retention_score &gt;= 40 AND rs.retention_score &lt; 60 THEN 1 ELSE 0 END) AS warningCount,
            SUM(CASE WHEN rs.retention_score &lt; 40 THEN 1 ELSE 0 END) AS severeCount,
            COUNT(*) AS totalCount
        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        <where>
            <if test="req.roundId != null">
                AND rs.round_id = #{req.roundId}
            </if>
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
        </where>
    </select>


    <!-- 부서+직위별 안정성 인원 분포 -->
    <select id="findStabilityRatioByDept"
            parameterType="com.dao.momentum.retention.prospect.query.dto.request.RetentionInsightRequestDto"
            resultType="com.dao.momentum.retention.prospect.query.dto.request.StabilityRatioByDeptRaw">

        <if test="req.deptId != null">
            <include refid="CommonDeptTree"/>
        </if>

        SELECT
            d.dept_id AS deptId,
            d.name AS deptName,
            p.position_id AS positionId,
            p.name AS positionName,
            SUM(CASE WHEN rs.retention_score &gt;= 80 THEN 1 ELSE 0 END) AS goodCount,
            SUM(CASE WHEN rs.retention_score &gt;= 60 AND rs.retention_score &lt; 80 THEN 1 ELSE 0 END) AS normalCount,
            SUM(CASE WHEN rs.retention_score &gt;= 40 AND rs.retention_score &lt; 60 THEN 1 ELSE 0 END) AS warningCount,
            SUM(CASE WHEN rs.retention_score &lt; 40 THEN 1 ELSE 0 END) AS severeCount,
            COUNT(*) AS totalCount
        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        JOIN department d ON e.dept_id = d.dept_id
        JOIN position p ON e.position_id = p.position_id
        <where>
            <if test="req.roundId != null">
                AND rs.round_id = #{req.roundId}
            </if>
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
        </where>
        GROUP BY d.dept_id, p.position_id
        ORDER BY d.dept_id, p.position_id
    </select>

    <!-- 부서별 progress 분포 -->
    <select id="findProgressDistributionByDept"
            parameterType="com.dao.momentum.retention.prospect.query.dto.request.RetentionInsightRequestDto"
            resultType="com.dao.momentum.retention.prospect.query.dto.response.RetentionProgressDistributionDto">

        SELECT
            i.dept_id AS deptId,
            d.name AS deptName,
            i.position_id AS positionId,
            p.name AS positionName,
            SUM(COALESCE(i.emp_count, 0)) AS empCount,
            SUM(COALESCE(i.progress_20, 0)) AS progress20,
            SUM(COALESCE(i.progress_40, 0)) AS progress40,
            SUM(COALESCE(i.progress_60, 0)) AS progress60,
            SUM(COALESCE(i.progress_80, 0)) AS progress80,
            SUM(COALESCE(i.progress_100, 0)) AS progress100
        FROM retention_insight i
        JOIN department d ON i.dept_id = d.dept_id
        LEFT JOIN position p ON i.position_id = p.position_id
        <where>
            <if test="req.roundId != null">
                AND i.round_id = #{req.roundId}
            </if>
            <if test="req.deptId != null">
                AND i.dept_id = #{req.deptId}
            </if>
            <if test="req.positionId != null">
                AND i.position_id = #{req.positionId}
            </if>
        </where>
        GROUP BY i.dept_id
        ORDER BY d.dept_id
    </select>

    <!-- 월별 근속 지수 추이 -->
    <select id="findMonthlyRetentionStats"
            parameterType="com.dao.momentum.retention.prospect.query.dto.request.RetentionTimeseriesRequestDto"
            resultType="com.dao.momentum.retention.prospect.query.dto.response.RetentionMonthlyStatDto">

        <if test="req.deptId != null">
            <include refid="CommonDeptTree"/>
        </if>

        SELECT
            r.year AS year,
            r.month AS month,
            ROUND(AVG(rs.retention_score), 2) AS averageScore,
            ROUND(STDDEV(rs.retention_score), 2) AS stdDeviation
        FROM retention_round r
        JOIN retention_support rs ON r.round_id = rs.round_id
        JOIN employee e ON rs.emp_id = e.emp_id
        <where>
            r.year = #{req.year}
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
        </where>
        GROUP BY r.month
        ORDER BY r.month
    </select>

</mapper>
