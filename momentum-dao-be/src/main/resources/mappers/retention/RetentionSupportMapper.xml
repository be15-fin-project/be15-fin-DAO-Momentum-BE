<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.momentum.retention.prospect.query.mapper.RetentionSupportMapper">

    <!-- 근속 전망 조회 -->
    <select id="findRetentionForecasts" resultType="com.dao.momentum.retention.prospect.query.dto.request.RetentionSupportRaw">
        <if test="req.deptId != null">
            WITH RECURSIVE dept_tree AS (
                SELECT dept_id FROM department
                WHERE dept_id = #{req.deptId} AND is_deleted = 'N'
                UNION ALL
                SELECT d.dept_id
                FROM department d
                INNER JOIN dept_tree dt ON d.parent_dept_id = dt.dept_id
                WHERE d.is_deleted = 'N'
            )
        </if>
        SELECT
            e.name AS empName,
            e.emp_no AS empNo,
            d.name AS deptName,
            p.name AS positionName,
            rs.retention_score,
            rr.round_no AS roundNo,
            CONCAT(
                '직무:', rs.job_level, ', ',
                '보상:', rs.comp_level, ', ',
                '관계:', rs.relation_level, ', ',
                '성장:', rs.growth_level, ', ',
                '근속:', rs.tenure_level, ', ',
                '워라밸:', rs.wlb_level
            ) AS summaryComment
        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        JOIN department d ON e.dept_id = d.dept_id
        JOIN position p ON e.position_id = p.position_id
        JOIN retention_round rr ON rs.round_id = rr.round_id
        WHERE rr.round_no = #{roundNo}
            <if test="req.empNo != null">
                AND e.emp_no = #{req.empNo}
            </if>
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
            <if test="req.stabilityType != null">
                AND CASE
                    WHEN rs.retention_score >= 80 THEN 'STABLE'
                    WHEN rs.retention_score >= 60 THEN 'WARNING'
                    ELSE 'UNSTABLE'
                END = #{req.stabilityType}
            </if>

        ORDER BY rs.retention_score DESC
        LIMIT #{req.size}
        OFFSET #{req.offset}
    </select>

    <!-- 총 개수 조회 -->
    <select id="countRetentionForecasts" resultType="long">
        <if test="req.deptId != null">
            WITH RECURSIVE dept_tree AS (
                SELECT dept_id FROM department
                WHERE dept_id = #{req.deptId} AND is_deleted = 'N'
                UNION ALL
                SELECT d.dept_id
                FROM department d
                INNER JOIN dept_tree dt ON d.parent_dept_id = dt.dept_id
                WHERE d.is_deleted = 'N'
            )
        </if>
        SELECT COUNT(*)
        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        JOIN department d ON e.dept_id = d.dept_id
        JOIN position p ON e.position_id = p.position_id
        JOIN retention_round rr ON rs.round_id = rr.round_id
        WHERE rr.round_no = #{roundNo}
            <if test="req.empNo != null">
                AND e.emp_no = #{req.empNo}
            </if>
            <if test="req.deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="req.positionId != null">
                AND e.position_id = #{req.positionId}
            </if>
            <if test="req.stabilityType != null">
                AND CASE
                    WHEN rs.retention_score >= 80 THEN 'STABLE'
                    WHEN rs.retention_score >= 60 THEN 'WARNING'
                    ELSE 'UNSTABLE'
                END = #{req.stabilityType}
            </if>

    </select>

    <!-- 최신 회차 조회 -->
    <select id="findLatestRoundNo" resultType="int">
        SELECT MAX(round_no) FROM retention_round
    </select>

    <!-- 근속 전망 상세 조회 -->
    <select id="findSupportDetail"
            resultType="com.dao.momentum.retention.prospect.query.dto.response.RetentionSupportDetailDto">
        SELECT
        e.name AS empName,
        e.emp_no AS empNo,
        d.name AS deptName,
        p.name AS positionName,
        rr.round_no AS roundNo,

        -- 점수 등급 변환 (직무 만족도)
        CASE
        WHEN rs.job_level >= 95 THEN '탁월'
        WHEN rs.job_level >= 85 THEN '우수'
        WHEN rs.job_level >= 70 THEN '양호'
        WHEN rs.job_level >= 60 THEN '주의'
        ELSE '미흡'
        END AS jobGrade,

        -- 보상 만족도
        CASE
        WHEN rs.comp_level >= 95 THEN '탁월'
        WHEN rs.comp_level >= 85 THEN '우수'
        WHEN rs.comp_level >= 70 THEN '양호'
        WHEN rs.comp_level >= 60 THEN '주의'
        ELSE '미흡'
        END AS compGrade,

        -- 관계 만족도
        CASE
        WHEN rs.relation_level >= 95 THEN '탁월'
        WHEN rs.relation_level >= 85 THEN '우수'
        WHEN rs.relation_level >= 70 THEN '양호'
        WHEN rs.relation_level >= 60 THEN '주의'
        ELSE '미흡'
        END AS relationGrade,

        -- 성장 만족도
        CASE
        WHEN rs.growth_level >= 95 THEN '탁월'
        WHEN rs.growth_level >= 85 THEN '우수'
        WHEN rs.growth_level >= 70 THEN '양호'
        WHEN rs.growth_level >= 60 THEN '주의'
        ELSE '미흡'
        END AS growthGrade,

        -- 워라밸 만족도
        CASE
        WHEN rs.wlb_level >= 95 THEN '탁월'
        WHEN rs.wlb_level >= 85 THEN '우수'
        WHEN rs.wlb_level >= 70 THEN '양호'
        WHEN rs.wlb_level >= 60 THEN '주의'
        ELSE '미흡'
        END AS wlbGrade,

        rs.tenure_level AS tenure,

        -- 종합 근속 전망 등급
        CASE
        WHEN rs.retention_score >= 95 THEN '탁월'
        WHEN rs.retention_score >= 85 THEN '우수'
        WHEN rs.retention_score >= 70 THEN '양호'
        WHEN rs.retention_score >= 60 THEN '주의'
        ELSE '미흡'
        END AS retentionGrade,

        -- 안정성 유형 (enum 문자열 그대로 반환)
        CASE
        WHEN rs.retention_score >= 80 THEN 'STABLE'
        WHEN rs.retention_score >= 60 THEN 'WARNING'
        ELSE 'UNSTABLE'
        END AS stabilityType

        FROM retention_support rs
        JOIN employee e ON rs.emp_id = e.emp_id
        LEFT JOIN department d ON e.dept_id = d.dept_id
        LEFT JOIN position p ON e.position_id = p.position_id
        JOIN retention_round rr ON rs.round_id = rr.round_id

        WHERE rs.retention_id = #{retentionId}
    </select>


</mapper>
