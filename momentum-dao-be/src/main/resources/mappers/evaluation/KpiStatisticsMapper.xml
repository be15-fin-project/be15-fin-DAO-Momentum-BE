<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.momentum.evaluation.kpi.query.mapper.KpiStatisticsMapper">

    <!-- KPI 종합 현황 통계 조회 -->
    <select id="getMonthlyStatistics"
            parameterType="com.dao.momentum.evaluation.kpi.query.dto.request.KpiStatisticsRequestDto"
            resultType="com.dao.momentum.evaluation.kpi.query.dto.response.KpiStatisticsResponseDto">
        WITH RECURSIVE dept_tree AS (
            SELECT dept_id
            FROM department
            WHERE dept_id = #{deptId}
                AND is_deleted = 'N'
            UNION ALL
            SELECT d.dept_id
            FROM department d
            INNER JOIN dept_tree dt ON d.parent_dept_id = dt.dept_id
            WHERE d.is_deleted = 'N'
        )
        SELECT
            COALESCE(COUNT(*), 0) AS totalKpiCount,
            COALESCE(SUM(CASE WHEN k.kpi_progress = 100 THEN 1 ELSE 0 END), 0) AS completedKpiCount,
            COALESCE(ROUND(AVG(k.kpi_progress), 2), 0.0) AS averageProgress
        FROM kpi k
        JOIN employee e ON k.emp_id = e.emp_id
        <where>
            k.is_deleted = 'N'
            AND k.status_id = 2
            <if test="year != null and month != null">
                AND YEAR(k.created_at) = #{year}
                AND MONTH(k.created_at) = #{month}
            </if>
            <if test="deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="empNo != null">
                AND e.emp_no = #{empNo}
            </if>
            <if test="positionId != null">
                AND e.position_id = #{positionId}
            </if>
        </where>

    </select>

    <!-- KPI 시계열 통계 조회 -->
    <select id="getTimeseriesStatistics"
            resultType="com.dao.momentum.evaluation.kpi.query.dto.response.KpiTimeseriesMonthlyDto">
        WITH RECURSIVE dept_tree AS (
            SELECT dept_id
            FROM department
            WHERE dept_id = #{deptId}
                AND is_deleted = 'N'
            UNION ALL
            SELECT d.dept_id
            FROM department d
            INNER JOIN dept_tree dt ON d.parent_dept_id = dt.dept_id
            WHERE d.is_deleted = 'N'
        )
        SELECT
            MONTH(k.created_at) AS month,
            COUNT(*) AS totalKpiCount,
            SUM(CASE WHEN k.kpi_progress = 100 THEN 1 ELSE 0 END) AS completedKpiCount,
            ROUND(AVG(k.kpi_progress), 2) AS averageProgress
        FROM kpi k
        JOIN employee e ON k.emp_id = e.emp_id
        WHERE k.is_deleted = 'N'
            AND k.status_id = 2
            AND YEAR(k.created_at) = #{year}
            <if test="empNo != null">
                AND e.emp_no = #{empNo}
            </if>
            <if test="deptId != null">
                AND e.dept_id IN (SELECT dept_id FROM dept_tree)
            </if>
            <if test="positionId != null">
                AND e.position_id = #{positionId}
            </if>
        GROUP BY MONTH(k.created_at)
        ORDER BY month

    </select>


</mapper>
