<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dao.momentum.evaluation.hr.query.mapper.EvaluationHrMapper">

    <!-- 1) 페이징된 HR 평가 내역 목록 조회 -->
    <select id="findHrEvaluations"
            parameterType="map"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.HrEvaluationItemDto">

        WITH all_data AS (
            SELECT
                er.result_id,
                er.round_id,
                r.round_no,
                er.score,
                er.created_at,
                er.target_id
            FROM eval_response er
            JOIN eval_round r ON er.round_id = r.round_id
            JOIN eval_form f ON er.form_id = f.form_id
            WHERE f.name = 'HR_REVIEW'
                AND er.score IS NOT NULL
                <if test="req.roundId != null">
                    AND r.round_id = #{req.roundId}
                </if>
                <if test="req.startDate != null">
                    <![CDATA[AND r.start_at >= #{req.startDate}]]>
                </if>
                <if test="req.endDate != null">
                    <![CDATA[AND r.start_at <= #{req.endDate}]]>
                </if>
            ),
        ranked AS (
            SELECT
                *,
                RANK() OVER (PARTITION BY round_id ORDER BY score DESC, result_id ASC) AS ranking
            FROM all_data
        ),
        rate_data AS (
            SELECT
                hr.round_id,
                hr.rate_s,
                hr.rate_a,
                hr.rate_b,
                hr.rate_c,
                hr.rate_d,
                cnt.total_count
            FROM hr_rate hr
            JOIN (
                SELECT round_id, COUNT(*) AS total_count
                FROM eval_response
                WHERE score IS NOT NULL
                GROUP BY round_id
            ) cnt ON cnt.round_id = hr.round_id
        ),
        graded AS (
            SELECT
                r.result_id,
                r.round_no,
                r.created_at,
                r.target_id,
                CASE
                    WHEN r.ranking <![CDATA[<=]]> FLOOR(rd.total_count * rd.rate_s / 100) THEN 'S'
                    WHEN r.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a) / 100) THEN 'A'
                    WHEN r.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a + rd.rate_b) / 100) THEN 'B'
                    WHEN r.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a + rd.rate_b + rd.rate_c) / 100) THEN 'C'
                    ELSE 'D'
                END AS overall_grade
            FROM ranked r
            JOIN rate_data rd ON r.round_id = rd.round_id
        )
        SELECT
            g.round_no      AS round_no,
            g.result_id     AS resultId,
            g.overall_grade AS overall_grade,
            g.created_at    AS evaluated_at,
            CASE
            WHEN o.objection_id IS NOT NULL THEN TRUE
            ELSE FALSE
            END AS objectionSubmitted
        FROM graded g
        LEFT JOIN hr_objection o ON o.result_id = g.result_id AND o.is_deleted = 'N'
        WHERE g.target_id = #{empId}
        ORDER BY g.created_at DESC
        LIMIT #{req.getOffset}, #{req.size}

    </select>


    <!-- 2) 전체 건수 조회 -->
    <select id="countHrEvaluations"
            parameterType="map"
            resultType="long">
        SELECT COUNT(*)
        FROM eval_response er
        JOIN eval_round r  ON er.round_id = r.round_id
        JOIN eval_form  f  ON er.form_id  = f.form_id
        WHERE er.target_id = #{empId}
            AND f.name = 'HR_REVIEW'
            <if test="req.roundId != null">
                AND r.round_id = #{req.roundId}
            </if>
            <if test="req.startDate != null">
                AND r.start_at <![CDATA[>=]]> #{req.startDate}
            </if>
            <if test="req.endDate != null">
                AND r.start_at <![CDATA[<=]]> #{req.endDate}
            </if>
    </select>

    <!-- 3) 단일 평가 결과에 대한 요인별 점수 목록 조회 -->
    <select id="findFactorScores"
            parameterType="long"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.FactorScoreDto">
        SELECT
            p.property_id      AS propertyId,
            p.name             AS propertyName,
            CASE
                WHEN s.score >= 95 THEN '탁월'
                WHEN s.score >= 85 THEN '우수'
                WHEN s.score >= 70 THEN '양호'
                WHEN s.score >= 60 THEN '주의'
                ELSE '미흡'
            END                     AS Score
        FROM eval_score s
        JOIN eval_property p ON s.property_id = p.property_id
        WHERE s.result_id = #{resultId}
        ORDER BY p.property_id
    </select>


    <!-- 인사 상세 조회 -->
    <select id="findEvaluationContent"
            parameterType="map"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.HrEvaluationDetailDto">
        WITH
            -- 1. result_id로부터 round_id, 평가자 정보 조회
            base AS (
                SELECT
                    er.result_id,
                    er.round_id,
                    er.eval_id,
                    er.target_id,
                    er.score,
                    DATE_FORMAT(er.created_at, '%Y-%m-%d') AS createdAt,
                    e.emp_no,
                    e.name
                FROM eval_response er
                JOIN employee e ON e.emp_id = er.eval_id
                WHERE er.result_id = #{resultId}
                    AND er.target_id = #{empId}
            ),

            -- 2. 해당 round_id의 전체 평가 결과에 대해 랭킹 부여
            ranked AS (
                SELECT
                    er.result_id,
                    er.round_id,
                    ROW_NUMBER() OVER (PARTITION BY er.round_id ORDER BY er.score DESC) AS ranking
                FROM eval_response er
                JOIN eval_form f ON er.form_id = f.form_id
                WHERE er.round_id = (SELECT round_id FROM base)
                    AND er.score IS NOT NULL
                    AND f.name = 'HR_REVIEW'
            ),

            -- 3. 등급 기준 비율 + 전체 인원 수 가져오기
            rate_data AS (
                SELECT
                    hr.round_id,
                    hr.rate_s,
                    hr.rate_a,
                    hr.rate_b,
                    hr.rate_c,
                    hr.rate_d,
                    cnt.total_count
                FROM hr_rate hr
                JOIN (
                    SELECT round_id, COUNT(*) AS total_count
                    FROM eval_response
                    WHERE round_id = (SELECT round_id FROM base)
                    GROUP BY round_id
                ) cnt ON cnt.round_id = hr.round_id
                WHERE hr.round_id = (SELECT round_id FROM base)
            ),

            -- 4. 등급 계산
            evaluated AS (
                SELECT
                    b.result_id,
                    b.emp_no,
                    b.name,
                    b.createdAt,
                    CASE
                        WHEN rk.ranking <![CDATA[<=]]> FLOOR(rd.total_count * rd.rate_s / 100) THEN 'S'
                        WHEN rk.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a) / 100) THEN 'A'
                        WHEN rk.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a + rd.rate_b) / 100) THEN 'B'
                        WHEN rk.ranking <![CDATA[<=]]> FLOOR(rd.total_count * (rd.rate_s + rd.rate_a + rd.rate_b + rd.rate_c) / 100) THEN 'C'
                        ELSE 'D'
                    END AS overall_grade
                FROM base b
                JOIN ranked rk ON rk.result_id = b.result_id
                JOIN rate_data rd ON b.round_id = rd.round_id
            )

        SELECT
            result_id     AS resultId,
            emp_no        AS empNo,
            name          AS empName,
            createdAt     AS evaluatedAt,
            overall_grade AS overallGrade
        FROM evaluated
    </select>

    <!-- 등급 비율 조회 -->
    <select id="findRateInfo"
            parameterType="long"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.RateInfo">
        SELECT
            r.rate_s AS rateS,
            r.rate_a AS rateA,
            r.rate_b AS rateB,
            r.rate_c AS rateC,
            r.rate_d AS rateD
        FROM eval_response er
        JOIN hr_rate r ON r.round_id = er.round_id
        WHERE er.result_id = #{resultId}
    </select>

    <!-- 가중치 정보 조회 -->
    <select id="findWeightInfo"
            parameterType="long"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.WeightInfo">
        SELECT
            w.perform_wt     AS weightPerform,
            w.team_wt        AS weightTeam,
            w.attitude_wt    AS weightAttitude,
            w.growth_wt      AS weightGrowth,
            w.engagement_wt  AS weightEngagement,
            w.result_wt      AS weightResult
        FROM eval_response er
        JOIN hr_weight w ON w.round_id = er.round_id
        WHERE er.result_id = #{resultId}
    </select>


    <!-- 인사 평가 회차 별 인사 평가 등급 및 가중치 기준 조회 -->
    <select id="findRateInfoByRoundNo"
            parameterType="int"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.RateInfo">
        SELECT
            rate_s, rate_a, rate_b, rate_c, rate_d
        FROM hr_rate
        WHERE round_id = (SELECT round_id FROM eval_round WHERE round_no = #{roundNo})
    </select>

    <select id="findWeightInfoByRoundNo"
            parameterType="int"
            resultType="com.dao.momentum.evaluation.hr.query.dto.response.WeightInfo">
        SELECT
            perform_wt AS weightPerform,
            team_wt    AS weightTeam,
            attitude_wt AS weightAttitude,
            growth_wt   AS weightGrowth,
            engagement_wt AS weightEngagement,
            result_wt   AS weightResult
        FROM hr_weight
        WHERE round_id = (SELECT round_id FROM eval_round WHERE round_no = #{roundNo})
    </select>

    <select id="findLatestRoundNo"
            resultType="int">
        SELECT MAX(round_no) FROM eval_round
    </select>

</mapper>
